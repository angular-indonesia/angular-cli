# Configuration file for https://circleci.com/gh/angular/angular-cli

# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
# See http://blog.daemonl.com/2016/02/yaml.html
# To validate changes, use an online parser, eg.
# http://yaml-online-parser.appspot.com/

version: 2.1

orbs:
  devinfra: angular/dev-infra@1.0.8

parameters:
  snapshot_changed:
    type: boolean
    default: false

# Variables

## IMPORTANT
# Windows needs its own cache key because binaries in node_modules are different.
# See https://circleci.com/docs/2.0/caching/#restoring-cache for how prefixes work in CircleCI.
var_1: &cache_key v1-angular_devkit-16.14-{{ checksum "yarn.lock" }}
var_3: &default_nodeversion '18.13'
var_3_major: &default_nodeversion_major '18'
# The major version of node toolchains. See tools/toolchain_info.bzl
# NOTE: entries in this array may be repeated elsewhere in the file, find them before adding more
var_3_all_major: &all_nodeversion_major ['18']
# Workspace initially persisted by the `setup` job, and then enhanced by `setup-and-build-win`.
# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
# https://circleci.com/blog/deep-diving-into-circleci-workspaces/
var_4: &workspace_location .
# Filter to only release branches on a given job.
var_5_only_releases: &only_release_branches
  filters:
    branches:
      only:
        - main
        - /\d+\.\d+\.x/
var_5_only_snapshots: &only_snapshot_branches
  filters:
    branches:
      only:
        - main
        # This is needed to run this steps on Renovate PRs that amend the snapshots package.json
        - /^pull\/.*/

var_6: &only_pull_requests
  filters:
    branches:
      only:
        - /pull\/\d+/

var_7: &only_builds_branches
  filters:
    branches:
      only:
        - main
        - /\d+\.\d+\.x/
        - ^feature\-.*

# All e2e test suites
var_8: &all_e2e_subsets ['npm', 'esbuild', 'yarn']

# Executor Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors
executors:
  action-executor:
    parameters:
      nodeversion:
        type: string
        default: *default_nodeversion
    docker:
      - image: cimg/node:<< parameters.nodeversion >>
    working_directory: ~/ng
    resource_class: small

  bazel-executor:
    parameters:
      nodeversion:
        type: string
        default: *default_nodeversion
    docker:
      - image: cimg/node:<< parameters.nodeversion >>-browsers
    working_directory: ~/ng
    resource_class: xlarge

# Command Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
commands:
  fail_fast:
    steps:
      - run:
          name: 'Cancel workflow on fail'
          shell: bash
          when: on_fail
          command: |
            curl -X POST --header "Content-Type: application/json" "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel?circle-token=${CIRCLE_TOKEN}"

  initialize_env:
    steps:
      - run:
          name: Initialize Environment
          command: ./.circleci/env.sh

  rebase_pr:
    steps:
      - devinfra/rebase-pr-on-target-branch:
          base_revision: << pipeline.git.base_revision >>
          head_revision: << pipeline.git.revision >>

  custom_attach_workspace:
    description: Attach workspace at a predefined location
    steps:
      - attach_workspace:
          at: *workspace_location

  setup_bazel_rbe:
    parameters:
      key:
        type: env_var_name
        default: CIRCLE_PROJECT_REPONAME
    steps:
      - run:
          name: 'Copy Bazel RC'
          shell: bash
          command: |
            # Conditionally, copy bazel configuration based on the current VM
            # operating system running. We detect Windows by checking for `%AppData%`.
            if [[ -n "${APPDATA}" ]]; then
              cp "./.circleci/bazel.windows.rc" ".bazelrc.user";
            else
              cp "./.circleci/bazel.linux.rc" ".bazelrc.user";
            fi
      - devinfra/setup-bazel-remote-exec:
          shell: bash

# Job definitions
jobs:
  setup:
    executor: action-executor
    resource_class: medium
    steps:
      - checkout
      - rebase_pr
      - initialize_env
      - restore_cache:
          keys:
            - *cache_key
      - run: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - persist_to_workspace:
          root: *workspace_location
          paths:
            - ./*
      - save_cache:
          key: *cache_key
          paths:
            - ~/.cache/yarn

  # TODO: Remove once no other jobs rely on it anymore.
  build:
    executor: bazel-executor
    steps:
      - custom_attach_workspace
      - setup_bazel_rbe
      - run:
          name: Bazel Build Packages
          command: yarn bazel build //...
      - fail_fast

  e2e-tests:
    executor: bazel-executor
    parallelism: 8
    parameters:
      nodeversion:
        type: string
        default: *default_nodeversion
      snapshots:
        type: boolean
        default: false
      subset:
        type: enum
        enum: *all_e2e_subsets
        default: 'npm'
    steps:
      - custom_attach_workspace
      - initialize_env
      - setup_bazel_rbe
      - run: mkdir /mnt/ramdisk/e2e
      - run:
          name: Execute CLI E2E Tests with << parameters.subset >>
          command: yarn bazel test --define=E2E_TEMP=/mnt/ramdisk/e2e --define=E2E_SHARD_TOTAL=${CIRCLE_NODE_TOTAL} --define=E2E_SHARD_INDEX=${CIRCLE_NODE_INDEX} --config=e2e //tests/legacy-cli:e2e<<# parameters.snapshots >>.snapshots<</ parameters.snapshots >>.<< parameters.subset >>_node<< parameters.nodeversion >>
          no_output_timeout: 40m
      - store_artifacts:
          path: dist/testlogs/tests/legacy-cli/e2e<<# parameters.snapshots >>.snapshots<</ parameters.snapshots >>.<< parameters.subset >>_node<< parameters.nodeversion >>
      - store_test_results:
          path: dist/testlogs/tests/legacy-cli/e2e<<# parameters.snapshots >>.snapshots<</ parameters.snapshots >>.<< parameters.subset >>_node<< parameters.nodeversion >>
      - fail_fast

  test-browsers:
    executor: bazel-executor
    steps:
      - custom_attach_workspace
      - initialize_env
      - setup_bazel_rbe
      - run:
          name: Initialize Saucelabs
          command: setSecretVar SAUCE_ACCESS_KEY $(echo $SAUCE_ACCESS_KEY | rev)
      - run:
          name: Start Saucelabs Tunnel
          command: ./scripts/saucelabs/start-tunnel.sh
          background: true
        # Waits for the Saucelabs tunnel to be ready. This ensures that we don't run tests
        # too early without Saucelabs not being ready.
      - run: ./scripts/saucelabs/wait-for-tunnel.sh
      - run:
          name: E2E Saucelabs Tests
          command: yarn bazel test --config=saucelabs //tests/legacy-cli:e2e.saucelabs
      - run: ./scripts/saucelabs/stop-tunnel.sh
      - store_artifacts:
          path: dist/testlogs/tests/legacy-cli/e2e.saucelabs
      - store_test_results:
          path: dist/testlogs/tests/legacy-cli/e2e.saucelabs
      - fail_fast

  snapshot_publish:
    executor: action-executor
    resource_class: medium
    steps:
      - custom_attach_workspace
      - run:
          name: Deployment to Snapshot
          command: yarn admin snapshots --verbose
      - fail_fast

workflows:
  version: 2
  default_workflow:
    jobs:
      # Linux jobs
      - setup

      # Bazel jobs
      - build:
          requires:
            - setup

      - e2e-tests:
          name: e2e-snapshots-<< matrix.subset >>
          nodeversion: *default_nodeversion_major
          matrix:
            parameters:
              subset: *all_e2e_subsets
          snapshots: true
          pre-steps:
            - when:
                # Don't run snapshot E2E's unless it's on the main branch or the snapshots file has been updated.
                condition:
                  and:
                    - not:
                        equal: [main, << pipeline.git.branch >>]
                    - not: << pipeline.parameters.snapshot_changed >>
                steps:
                  - run: circleci-agent step halt
          requires:
            - build
          <<: *only_snapshot_branches

      - test-browsers:
          requires:
            - build

      # Publish jobs
      - snapshot_publish:
          <<: *only_builds_branches
          requires:
            - build
